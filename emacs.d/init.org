#+STARTUP: fold
* emacs
** Package: refresh package content on load
#+begin_src emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents))
#+end_src

** Set default frame size when opened in a window-system
#+begin_src emacs-lisp
  (when window-system (set-frame-size (selected-frame) 80 47))
  (when window-system (set-frame-position (selected-frame) 40 30))
#+end_src

** Rebind C-h ahd help-command
#+begin_src emacs-lisp
  (keyboard-translate ?\C-h ?\C-?) ;; some basic keyboard stuff, don't remove (written by Petr on 24 of June, 2019)

  ;; remap help command
  (global-set-key [?\C-x ?h] 'help-command)
#+end_src

** Inhibit startup screen
#+begin_src emacs-lisp
  ;; No startup screen
  (setq inhibit-startup-screen t)
#+end_src

** Inhibit startup message
#+begin_src emacs-lisp
  ;; No startup message
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)
#+end_src

** Remove default message in scratch buffer
#+begin_src emacs-lisp
  ;; No message in scratch buffer
  (setq initial-scratch-message nil)
#+end_src

** Change yes/no into y/n for answering yes/no questions
#+begin_src emacs-lisp
  ;; y/n for answering yes/no questions
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Use GNU ls on darwin for dired
#+begin_src emacs-lisp
  ;; use real ls on darwin for dired
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
	  insert-directory-program "/usr/local/bin/gls"
	  dired-listing-switches "-aBhl --group-directories-first"))
#+end_src

** Enable linum mode by default
#+begin_src emacs-lisp
  ;; fix line numbers
  (global-linum-mode t)
  (setq linum-format "%4d  ")

#+end_src

** Follow symlinks without asking
#+begin_src emacs-lisp
  ;; (setq vc-follow-symlinks nil)
  (setq vc-follow-symlinks t)
  (setq vc-handled-backends nil)
#+end_src
** Remove messages buffer
#+begin_src emacs-lisp

  ;; removes *messages* from the buffer
  ;; (setq-default message-log-max nil)
  ;; (kill-buffer "*Messages*")

#+end_src

** Remove completions from buffer list
#+begin_src emacs-lisp
  ;; Removes *Completions* from buffer
  (add-hook 'minibuffer-exit-hook
	    '(lambda ()
	       (let ((buffer "*Completions*"))
		 (and (get-buffer buffer)
		      (kill-buffer buffer)))))

  ;;;
  ;; (global-set-key (kbd "M-o") 'ace-window)

#+end_src

** Use 4 characters as default offset for c
#+begin_src emacs-lisp  
   (setq-default c-basic-offset 4)
#+end_src

** Hide top bar
#+begin_src emacs-lisp

  ;; ---------------------
  ;; ------ Remove top bar
  ;; ---------------------
  (add-to-list 'default-frame-alist
	       '(font . "Hasklug Nerd Font-16"))

  ;; "DejaVuSansMono NF-15"
#+end_src

** Hide menu bar and toolbar
#+begin_src emacs-lisp

  ;; ---------------------
  ;; ------ Remove top bar
  ;; ---------------------
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  ;(toggle-scroll-bar -1)
#+end_src

** Set custom emacs backup locations
This code blocks stores backup files (usually files ending with ~ or
files surrounded by #) in a specified directory

#+begin_src emacs-lisp

  ;; ---------------------
  ;; ------ EMACS Backups
  ;; --------------------
  (setq backup-directory-alist `(("." . "~/.emacs_backups")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
  (setq auto-save-file-name-transforms
    `((".*" "~/.emacs_autosaves/" t)))

#+end_src

** Customize modeline
# #+begin_src emacs-lisp
#   ;;;;;;;;;;;;;;;;;;;;;;;;
#   ;;;;;;; modeline ;;;;;;;
#   ;;;;;;;;;;;;;;;;;;;;;;;;
#   (require 'diminish)
#   (eval-after-load "projectile" '(diminish 'projectile-mode " π"))
#   (eval-after-load "flycheck" '(diminish 'flycheck-mode " φ"))
#   (eval-after-load "company" '(diminish 'company-mode " c"))
#   (diminish 'visual-line-mode " λ")

#   (setq-default header-line-format
# 		(quote
# 		 (
# 		  "       "
# 		  mode-line-buffer-identification
# 		  ""
# 		  mode-line-modes
# 		  )))
#   (setq-default mode-line-format nil)

# #+end_src

** Use doom modeline
Comment customize modeline if using this.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Save sesions between launches                                   
#+begin_src emacs-lisp

  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ;;          Save sessions between launches          ;;
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; (setq desktop-dirname         "~/.emacs.d/desktop/"
  ;;       desktop-base-file-name      "emacs.desktop"
  ;;       desktop-load-locked-desktop nil
  ;;       desktop-auto-save-timeout   30)

  ;; (setq desktop-path (list "~/.emacs.d/desktop/"))
  ;; (setq desktop-dirname "~/.emacs.d/desktop/")
  ;; (setq desktop-restore-eager 5)
  ;; (setq desktop-load-locked-desktop t)


  ;; (setq desktop-path (list "~/.emacs.d/desktop/"))
  ;; (defconst my-savefile-dir (expand-file-name "savefile" user-emacs-directory))  ;; from https://old.reddit.com/r/emacs/comments/aoof3m/can_i_disable_asking_to_save_directory_for_desktop/

  ;; (desktop-save-mode 1)
  ;; (desktop-read)

  ;; ;; Initial buffer
  ;; (setq initial-buffer-choice nil)

  ;; ;; Text mode is initial mode
  ;; (setq initial-major-mode 'org-mode)

#+end_src

* citar
#+begin_src emacs-lisp

  ;; ---------------------
  ;; -- CITAR citations --
  ;; ---------------------
  ;;(add-to-list 'load-path "/Users/kqql397/Downloads/citar")
  ;;(load "citar")
  ;;(load "citar-citeproc")

  (use-package citar
    :custom
    (org-cite-global-bibliography '("~/Documents/org/library.bib"))    
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)

    :bind
    (:map org-mode-map :package org ("C-c r" . #'org-cite-insert)))

  (setq citar-templates
	'((main . "${author:15} (${date year issued:4}): ${title}" )
	  (suffix . "${author:15} (${date year issued:4}): ${title}")
	  (preview . "${author:15} (${date year issued:4}): ${title}")
	  (note . "${author:15} (${date year issued:4}): ${title}")))
#+end_src

* company
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode))
  (setq company-minimum-prefix-length 1
	company-idle-delay 0.0) ;; default is 0.2

    ;; ;;
    ;; (global-set-key (kbd "<tab>") #'company-indent-or-complete-common) - this thing breaks autocompletion

  ;; (use-package company-box
  ;;   :hook (company-mode . company-box-mode))
#+end_src
* lsp-mode
#+begin_src emacs-lisp

    ;; -----------------------
    ;; ------- LSP-mode ------
    ;; -----------------------
    (require 'lsp-mode)

    (use-package lsp-mode
      :diminish LSP " λσπ"
      :init
      (setq lsp-keymap-prefix "C-c l")
      (setq lsp-headerline-breadcrumb-mode '(project file symbols))
      :config
      (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
      :hook ((lsp-mode . lsp-enable-which-key-integration)))

    (use-package lsp-ui
      :config
      (setq lsp-ui-sideline-show-hover t)
      (setq lsp-ui-sideline-show-diagnostics t)
      (setq lsp-ui-doc-enable t))

    (use-package lsp-jedi
      :ensure t
      :hook (python-mode . (lambda ()
			   (require 'lsp-jedi)
			   (lsp))))

#+end_src

    :config
    (with-eval-after-load "lsp-mode"
      (add-to-list 'lsp-disabled-clients 'pyls)
      (add-to-list 'lsp-enabled-clients 'jedi)))


  (use-package lsp-mode
    :diminish LSP " λσπ"
    :init
    ;; set prefix for lsp-command-keymap
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-headerline-breadcrumb-mode '(project file symbols)))

  ;; (add-hook 'lsp-mode-hook #'enable-which-key-integration) ;; I am too dumb to add this to use-package (get weird errors)



     ;; (use-package lsp-pyright
     ;;   :ensure t
     ;;   :hook (python-mode . (lambda ()
     ;; 			 (require 'lsp-pyright)
     ;; 			 (lsp))))  ; or lsp-deferred



** change gc settings
Described at https://emacs-lsp.github.io/lsp-mode/page/performance/

#+begin_src emacs-lisp
  (setq gc-cons-threshold 400000000)
#+end_src

#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024))
#+end_src

* org-mode
** org-mode
#+begin_src emacs-lisp

    ;; ---------------------
    ;; -------- ORG --------
    ;; ---------------------
    (require 'org-inlinetask)
    (setq org-log-done t)
    (setq org-todo-keywords '((sequence "TODO(t)" "ONGOING(0)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

    ;; setup keys
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c t") 'org-insert-structure-template)
    ;; (global-set-key (kbd "C-c C-w") 'org-refile-targets)

    ;; (setq org-refile-targets '(("~/Documents/Org/todo.org" :maxlevel . 3)
    ;;                            ("~/Documents/Org/someday.org" :level . 1)
    ;;                            ("~/Documents/Org/tickler.org" :maxlevel . 2)
    ;; 			   ("~/Documents/Org/meetings.org" :maxlevel . 5)))

    (setq org-capture-templates '(("t" "Todo [inbox]" entry
				   (file+headline "~/Documents/org/inbox.org" "Tasks")
				   "* TODO %i%?")
				  ("s" "Slipbox" entry
				   (file+headline "~/Documents/org/roam/inbox.org" "Slipbox")
				   "* %i% \n %U"
				   :empty-lines 1)))

    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (add-hook 'org-mode-hook (lambda () (linum-mode 0)))
#+end_src
** code editing in Babel blocks
#+begin_src
  (setq org-src-tab-acts-natively t)
#+end_src
** configure Babel languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((R . t)
    (emacs-lisp . nil)
    (python . t)))
#+end_src

** allow images in emacs buffer
#+begin_src emacs-lisp
  (setq org-startup-with-inline-images t)
  (setq org-redisplay-inline-images t)
#+end_src
** change behaviour of org-goto
#+begin_src emacs-lisp
  (setq org-goto-interface (quote outline-path-completion))
#+end_src
** org-agenda
#+begin_src emacs-lisp

  ;; ---------------------
  ;; ------ agenda -------
  ;; ---------------------
  (setq org-directory (quote "~/Documents/org"))
  (setq org-agenda-files '(org-directory))

  (setq org-agenda-files (directory-files-recursively org-directory "org$"))

#+end_src

** Set bibtex completion display formats

#+begin_src emacs-lisp  
  (setq bibtex-completion-display-formats
	'((main . "${author:15} (${date year issued:4}): ${title}")
	  (suffix . "")
	  (preview . "")
	  (note . "")))
#+end_src

** org-roam

#+begin_src emacs-lisp
  ;; ---------------------
  ;; ----- ORG-roam ------ 
  ;; ---------------------
  (require 'org-roam)
  (setq citar-notes-paths '("~/Documents/Org/roam/references"))
  (setq citar-file-note-extensions '("org"))
#+end_src

*** Set org-roam directory  & basic configs
#+begin_src emacs-lisp  
  (setq org-roam-directory (file-truename "~/Documents/Org/roam"))
  (org-roam-db-autosync-mode)
  (setq org-roam-completion-everywhere t)
#+end_src

*** org-roam keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c f") 'org-roam-node-find)
  (global-set-key (kbd "C-c i") 'org-roam-node-insert)
  (global-set-key (kbd "C-c s") 'org-roam-capture)
  (global-set-key (kbd "C-c b") 'org-roam-buffer-toggle)

  (define-key org-roam-mode-map (kbd "C-c C-o") 'org-open-at-point)
#+end_src

*** org-roam buffer

#+begin_src emacs-lisp
  (setq org-roam-mode-sections
	(list #'org-roam-backlinks-section
	      #'org-roam-reflinks-section))  
#+end_src

*** make sure org-open does not create another window
#+begin_src emacs-lisp
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)
#+end_src

*** org-roam capture templates

- references/${title}.org. <- References go here. These are papers or
  books I read. 1 file per reference. If it is a book I want to read,
  just add a reference and create a TODO item (consider how to filter
  them out in agenda)
- notes/${title}.org <- notes/${title}.org. Knowledge graph / Zettelkasten / evergreen
- recurrent/${title}.org <- recurrent events (group meetings, 1:1s, journal club)
- people/${title}.org <- all personal info on people. This includes
  recruitment - then people's files can be linked from the
  recruitment page.
- projects/${title}.org <- individual projects, including recruitment campaings, purchases etc
- writing/${title}.org <- my short and long-form writings
	      
#+begin_src emacs-lisp
  (setq org-roam-capture-templates
      '(
	("n" "note" plain
	 "%?"
	 :if-new (file+head "notes/${slug}.org"
			    "#+title: ${title}\n")
	 :immediate-finish t
	 :unnarrowed t)
	("c" "recurrent" plain "%?"
	 :if-new (file+head "recurrent/${title}.org"
			    "#+title: ${title}\n")
	 :immediate-finish t
	 :unnarrowed t)
	("p" "person" plain "%?"
	 :if-new (file+head "people/${title}.org"
			    "#+title: ${title}\n")
	 :immediate-finish t
	 :unnarrowed t)
	("j" "project" plain "%?"
	 :if-new (file+head "people/${title}.org"
			    "#+title: ${title}\n")
	 :immediate-finish t
	 :unnarrowed t)		
	("w" "writing" plain "%?"
	 :if-new (file+head "writings/${title}.org"
			    "#+title: ${title}\n")
	 :immediate-finish t
	 :unnarrowed t)))
#+end_src

*** add 'type' propoperty and show file type in completion buffer
#+begin_src emacs-lisp
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
	(file-name-nondirectory
	 (directory-file-name
	  (file-name-directory
	   (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))

  (setq org-roam-node-display-template
      (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

*** function to capture references directly from citar
Slightly modified code from ref
#+begin_src emacs-lisp
		      (defun zk-citar--create-note (keys-entries)
			(interactive (list (citar-get-entry (citar-select-ref))))
			(let ((title (replace-regexp-in-string "-[[:digit:]]+" "" (citar-format--entry
										   "${author} - (${date}) - ${title}"
										   (cdr keys-entries)))))
			  (org-roam-capture- :templates
					     '(("r" "reference" plain "%?" :if-new
						(file+head "references/${citekey}.org"
							   ":PROzzS:")
						:unnarrowed t))
					     :info (list :citekey (car keys-entries))
					     :node (org-roam-node-create :title title)
					     :props '(:finalize find-file)))
			)

		(defun suslik/org-roam-node-from-cite (keys-entries)
		  (interactive (list (citar-get-entry (citar-select-ref))))
		  (let ((title (replace-regexp-in-string "-[[:digit:]]+" "" (citar-format--entry
									     "${author} - (${date}) - ${title}"
									     (cdr keys-entries))))
			(key (citar-format--entry "${=key=}"
						  (cdr keys-entries)))
			)
		    (message key)
		    (org-roam-capture- :templates
				       '(("r" "reference" plain "%?" :if-new
					  (file+head "references/${citekey}.org"
						     ":PROPERTIES:
:ROAM_REFS: [cite:@${citekey}]
:END:
#+title: ${title}\n")
					  :unnarrowed t))
				       :info (list :citekey key)
				       :node (org-roam-node-create :title title)
				       :props '(:finalize find-file))))
#+end_src

** org-journal
#+begin_src emacs-lisp
  (require 'org-journal)
  (setq org-journal-dir "~/Documents/Org/org-journal/")
  (setq org-journal-file-type 'monthly)
#+end_src
** org-cite-csl-activate
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/user-libraries/org-cite-csl-activate")

  (require 'oc-csl-activate)
  (setq org-cite-activate-processor 'csl-activate)
  (setq org-cite-csl-activate-use-citar-cache t)
  (add-hook 'org-mode-hook (lambda () (cursor-sensor-mode 1)))
  (add-hook 'org-mode-hook (lambda () (org-cite-csl-activate-render-all)))
#+end_src
* projectile
#+begin_src emacs-lisp
  ;; ---------------------
  ;; ---- Projectile -----
  ;; ---------------------
  (require 'projectile)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (add-to-list 'projectile-globally-ignored-directories "Downloads")

  (projectile-mode +1)

#+end_src

* r/ess

Ess nees to be installed from source:

#+begin_src emacs-lisp

  ;; ---------------------
  ;; --------- R ---------
  ;; ---------------------

  (add-to-list 'load-path "~/.emacs.d/user-libraries/ess/lisp")
  (load "ess-autoloads")
  (require 'ess-r-mode)

  (add-hook 'ess-mode-hook #'lsp)
  (add-hook 'ess-mode-hook
	    (lambda ()
	      (setq-local split-width-threshold 0)
	      (ess-set-style 'RStudio)
	      (ess-toggle-underscore nil)
	      (setq ess-ask-for-ess-directory nil)
	      (define-key ess-mode-map (kbd "C-j") 'ess-eval-region-or-line-and-step)))
  ;; (define-key ess-r-mode-map(kbd "C-j") ')

#+end_src

* snakemake
#+begin_src emacs-lisp

  ;; ---------------------
  ;; ------ Extension to mode mapping
  ;; ---------------------
  ;; (add-to-list 'auto-mode-alist '("\\.sf\\'" . elpy-enable))
  ;; (add-to-list 'auto-mode-alist '("\\.sf\\'" . snakemake-mode))

#+end_src

* theming / custom
#+begin_src emacs-lisp

  ;; ;; ;;; ------ THEMING -------
  ;; (load-theme 'dracula t)
  ;; (load-theme 'monokai t)

  ;; ;;; ------ CUSTOM --------
  ;; (custom-set-variables
  ;;  ;; custom-set-variables was added by Custom.
  ;;  ;; If you edit it by hand, you could mess it up, so be careful.
  ;;  ;; Your init file should contain only one such instance.
  ;;  ;; If there is more than one, they won't work right.
  ;;  '(ansi-color-faces-vector
  ;;    [default bold shadow italic underline bold bold-italic bold])
  ;;  '(ansi-color-names-vector
  ;;    (vector "#ffffff" "#f36c60" "#8bc34a" "#fff59d" "#4dd0e1" "#b39ddb" "#81d4fa" "#262626"))
  ;;  '(custom-enabled-themes '(dracula))
  ;;  '(custom-safe-themes
  ;;    '("fe1c13d75398b1c8fd7fdd1241a55c286b86c3e4ce513c4292d01383de152cb7" default))
  ;;  '(fci-rule-color "#3a3a3a")
  ;;  '(flycheck-checker-error-threshold 800)
  ;;  '(hl-sexp-background-color "#121212")
  ;;  '(package-selected-packages
  ;;    '(lsp-ui lsp-mode embark-consult embark marginalia orderless vertico citar org-roam elpher ace-window projectile helm groovy-mode poly-R poly-markdown polymode ess yaml-mode fish-mode snakemake-mode dracula-theme visual-fill-column sicp markdown-mode haskell-mode gitignore-mode))
  ;;  '(vc-annotate-background nil)
  ;;  '(vc-annotate-color-map
  ;;    '((20 . "#f36c60")
  ;;      (40 . "#ff9800")
  ;;      (60 . "#fff59d")
  ;;      (80 . "#8bc34a")
  ;;      (100 . "#81d4fa")
  ;;      (120 . "#4dd0e1")
  ;;      (140 . "#b39ddb")
  ;;      (160 . "#f36c60")
  ;;      (180 . "#ff9800")
  ;;      (200 . "#fff59d")
  ;;      (220 . "#8bc34a")
  ;;      (240 . "#81d4fa")
  ;;      (260 . "#4dd0e1")
  ;;      (280 . "#b39ddb")
  ;;      (300 . "#f36c60")
  ;;      (320 . "#ff9800")
  ;;      (340 . "#fff59d")
  ;;      (360 . "#8bc34a")))
  ;;  '(vc-annotate-very-old-color nil))
  ;; (custom-set-faces
  ;;  ;; custom-set-faces was added by Custom.
  ;;  ;; If you edit it by hand, you could mess it up, so be careful.
  ;;  ;; Your init file should contain only one such instance.
  ;;  ;; If there is more than one, they won't work right.
  ;;  )
  ;; (put 'downcase-region 'disabled nil)

#+end_src

* vertico / marginalia / embark / consult / orderless
** marginalia
#+begin_src emacs-lisp

  ;; ---------------------
  ;; ---- Marginalia -----
  ;; ---------------------

  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

#+end_src

** embark
#+begin_src emacs-lisp

  ;; ---------------------
  ;; ------ Embark -------
  ;; ---------------------
  (use-package embark
    :ensure t

    :bind
    (("C-c m" . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

#+end_src

** embark-consult
#+begin_src emacs-lisp

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** orderless
#+begin_src emacs-lisp

  ;; ---------------------
  ;; ----- Orderless -----
  ;; ---------------------
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

#+end_src

** vertico
#+begin_src emacs-lisp

  ;; ---------------------
  ;; ------ Vertico ------
  ;; ---------------------
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

#+end_src

* preserve vertico history over emacs restarts
#+begin_src emacs-lisp

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
     (setq read-extended-command-predicate
	   #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

#+end_src

* whichkey
#+begin_src emacs-lisp
  (use-package which-key)
  (which-key-mode)
#+end_src

* disabled
** mu4e
# #+begin_src emacs-lisp

#   ;; ---------------------
#   ;; -------- mu4e--------
#   ;; ---------------------
#   (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
#   (use-package mu4e
#     :config
#     ;; Update mail using 'U' in main view:
#     (setq mu4e-root-maildir "~/.mail")
#     (setq mu4e-get-mail-command "offlineimap")
#     (setq mu4e-view-show-addresses t)
#     (setq mu4e-attachment-dir (expand-file-name "~/Downloads/"))
#     (setq mu4e-maildir "~/.mail")
#     (setq mu4e-html2text-command "w3m -T text/html") ;; alternatively "textutil -stdin -format html -convert txt -stdout"
#     (setq mu4e-context-policy 'pick-first)
#     (setq mu4e-compose-context-policy 'always-ask)
#   (setq mu4e-contexts
# 	  (list
# 	   (make-mu4e-context
# 	    :name "protonmail"
# 	    :enter-func (lambda () (mu4e-message "Entering context petr.volkov@protonmail.com"))
# 	    :leave-func (lambda () (mu4e-message "Leaving context petr.volkov@protonmail.com"))
# 	    :match-func (lambda (msg)
# 			  (when msg
# 			    (mu4e-message-contact-field-matches
# 			     msg '(:from :to :cc :bcc) "petr.volkov@protonmail.com")))
# 	    :vars '((user-mail-address . "petr.volkov@protonmail.com")
# 		    (user-full-name . "Petr")
# 		    (mu4e-sent-folder . "/Sent")
# 		    (mu4e-drafts-folder . "/Drafts")
# 		    (mu4e-trash-folder . "/Trash")))
# 	   )
# 	  ))

# #+end_src

** ivy
# #+begin_src emacs-lisp
#   (use-package ivy
#     :diminish
#     ;; :bind (("C-s" . swiper)
#     ;; 	 :map ivy-minibuffer-map
#     ;; 	 ("TAB" . ivy-alt-done)
#     ;; 	 ("C-l" . ivy-alt-done)
#     ;; 	 ("C-j" . ivy-next-line)
#     ;; 	 ("C-k" . ivy-previous-line)
#     ;; 	 :map ivy-switch-buffer-map
#     ;; 	 ("C-k" . ivy-previous-line)
#     ;; 	 ("C-l" . ivy-done)
#     ;; 	 ("C-d" . ivy-switch-buffer-kill)
#     ;; 	 :map ivy-reverse-i-search-map
#     ;; 	 ("C-k" . ivy-previous-line)
#     ;; 	 ("C-d" . ivy-reverse-i-search-kill))
#     :init
#     (ivy-mode 1)
#     :config)

# #+end_src
** helm

#+begin_src emacs-lisp

  ;; ---------------------
  ;; --------- Helm ------
  ;; ---------------------
  ;; (require 'helm)
  ;; (require 'helm-config)
  ;; (global-set-key (kbd "C-c h") 'helm-command-prefix)

#+end_src

** python
#+begin_src emacs-lisp

  ;; ;; ---------------------
  ;; ;; ------ PYTHON -------
  ;; ;; ---------------------

  ;; (add-hook 'python-mode-hook 'eglot-ensure) 

  ;; ;; enable elpy
  ;; ;; (elpy-enable)

  ;; ;; (when (require 'flycheck nil t)
  ;; ;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  ;; ;;   (add-hook 'elpy-mode-hook 'flycheck-mode))
  ;; ;; (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))

  ;; ;; :init (global-flycheck-mode)


#+end_src

